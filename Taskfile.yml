# https://taskfile.dev

version: "3"

tasks:
  default:
    - task: help

  routes:
    desc: Prints backend http routes
    cmds:
      - mix phx.routes -r Chat.Router

  reset:
    desc: Restarts development environment
    cmds:
      - task: clean
      - task: setup

  clean:
    desc: Restarts development environment
    deps: [compose.up]
    cmds:
      - mix clean
      - mix ecto.drop
      - rm -rf ./assets/node_modules
      - rm -rf ./uploads
      - rm .env
      - task: compose.down

  format:
    desc: Formats elixir code
    cmds:
      - mix format

  migrate:
    desc: Runs database migrations
    deps: [compose.up]
    cmds:
      - mix ecto.migrate

  server:
    desc: Starts backend for development environment
    deps: [migrate]
    cmds:
      - mix phx.server

  iex.server:
    desc: Starts backend server on interactive mode
    deps: [migrate]
    cmds:
      - iex -S mix phx.server
  iex:
    desc: Starts interactive elixir session
    deps: [migrate]
    cmds:
      - iex -S mix

  compose.logs:
    desc: Shows logs from the containers
    cmds:
      - docker-compose logs --tail=5 -f

  compose.up:
    desc: Starts docker images
    cmds:
      - docker-compose up -d
      - docker-compose ps

  compose.down:
    desc: Stops docker images
    cmds:
      - docker-compose down -v

  setup.frontend:
    desc: Installs node_modules
    dir: ./assets
    cmds:
      - npm install

  setup:
    desc: |
      Setups the project by installing node_modules, elixir deps, running the database and
      seeding some test data
    deps: [compose.up]
    cmds:
      - cp .env.template .env
      - task: setup.frontend
      - mix deps.get
      - mix compile
      - mix ecto.setup
    status:
      - test -d ./assets/node_modules
      - test -d ./_build

  seed:
    desc: Seeds database with testing data
    cmds:
      - mix run priv/repo/seeds.exs

  react.devtools:
    desc: Starts native react devtools
    dir: ./assets
    cmds:
      - npx react-devtools

  test.backend:
    desc: Run tests for backend
    deps: [compose.up]
    cmds:
      - mix test

  test.backend.wip:
    desc: Run work in progress tagged tests for backend
    deps: [compose.up]
    cmds:
      - mix test --only wip

  test.frontend:
    desc: Runs tests for frontend
    dir: ./assets
    cmds:
      - npm test --inspect-brk --runInBand --coverage false

  test.frontend.watch:
    desc: Runs tests in watch mode
    dir: ./assets
    cmds:
      - npm run test.watch --inspect-brk --runInBand --coverage false

  test:
    desc: Runs all tests both backend and frontend
    cmds:
      - task: test.backend
      - task: test.frontend

  help:
    - cmd: echo "This is the cli tool for managing the project"
      silent: true

  act:
    desc: Runs all github-actions jobs locally
    cmds:
      - act

  act.test.backend:
    desc: Runs backend github-actions job locally
    cmds:
      - act -j backend

  act.test.frontend:
    desc: Runs backend github-actions job locally
    cmds:
      - act -j frontend

  ci.test.backend:
    desc: Runs backend tests in ci
    cmds:
      - mix test

  ci.test.frontend:
    desc: Runs frontend tests in ci
    dir: ./assets
    cmds:
      - npm test

  ci.format:
    desc: Runs formatting checking for elixir
    cmds:
      - mix format --check-formatted

  ci.dialyzer:
    desc: Runs Dialyzer for elixir
    cmds:
      - mkdir -p priv/plts
      - mix dialyzer --quiet

  ci.setup:
    desc: |
      Setups the project by installing node_modules, elixir deps and
       running the database some test data in github-actions
    cmds:
      - cp .env.template .env
      - mix deps.get
      - mix compile
      - npm --prefix ./assets ci --progress=false --no-audit --loglevel=error
